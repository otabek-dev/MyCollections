// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyItems.Backend;

#nullable disable

namespace MyItems.Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230720222544_CascadeDelte2")]
    partial class CascadeDelte2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MyItems.Backend.Models.Collection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Collections");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9e2efdb6-93ed-4091-bacf-8d611df2b3b8"),
                            Description = "Boston's most advanced compression wear technology increases muscle oxygenation, stabilizes active muscles",
                            ImageUrl = "https://picsum.photos/640/480/?image=421",
                            Name = "Refined Frozen Hat",
                            Theme = "Licensed",
                            UserId = new Guid("b70bba9e-7d66-4317-9e8f-330d86e57d76")
                        },
                        new
                        {
                            Id = new Guid("3f607394-c7c1-43b4-b6cf-44ac3a7ad002"),
                            Description = "Boston's most advanced compression wear technology increases muscle oxygenation, stabilizes active muscles",
                            ImageUrl = "https://picsum.photos/640/480/?image=668",
                            Name = "Gorgeous Concrete Pants",
                            Theme = "Refined",
                            UserId = new Guid("e52c7178-9d41-41e9-b6c7-e5fca18a57ce")
                        },
                        new
                        {
                            Id = new Guid("5cddd6a6-074d-4e80-b4df-3e31b8125ba5"),
                            Description = "New ABC 13 9370, 13.3, 5th Gen CoreA5-8250U, 8GB RAM, 256GB SSD, power UHD Graphics, OS 10 Home, OS Office A & J 2016",
                            ImageUrl = "https://picsum.photos/640/480/?image=168",
                            Name = "Intelligent Metal Car",
                            Theme = "Rustic",
                            UserId = new Guid("d87609de-2cd0-4526-b955-00a887793b43")
                        },
                        new
                        {
                            Id = new Guid("8aa80f67-c88b-4ef9-8bf5-1303d54e8fd3"),
                            Description = "The Football Is Good For Training And Recreational Purposes",
                            ImageUrl = "https://picsum.photos/640/480/?image=450",
                            Name = "Incredible Concrete Computer",
                            Theme = "Fantastic",
                            UserId = new Guid("177932fd-662d-46a5-b16a-efd2f78e50f7")
                        },
                        new
                        {
                            Id = new Guid("6badf3ba-7815-42c3-9b10-1a083d58ce3b"),
                            Description = "Ergonomic executive chair upholstered in bonded black leather and PVC padded seat and back for all-day comfort and support",
                            ImageUrl = "https://picsum.photos/640/480/?image=428",
                            Name = "Gorgeous Plastic Shirt",
                            Theme = "Generic",
                            UserId = new Guid("177932fd-662d-46a5-b16a-efd2f78e50f7")
                        },
                        new
                        {
                            Id = new Guid("7e22cceb-24f1-4d79-a009-ba2c5a1b4f57"),
                            Description = "The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J",
                            ImageUrl = "https://picsum.photos/640/480/?image=161",
                            Name = "Incredible Metal Fish",
                            Theme = "Intelligent",
                            UserId = new Guid("1069aa25-88f5-4ce9-a51e-572ff2b7b8ad")
                        },
                        new
                        {
                            Id = new Guid("397616cd-3d19-4d76-8d57-a8cb666f13d8"),
                            Description = "New range of formal shirts are designed keeping you in mind. With fits and styling that will make you stand apart",
                            ImageUrl = "https://picsum.photos/640/480/?image=299",
                            Name = "Rustic Wooden Cheese",
                            Theme = "Handcrafted",
                            UserId = new Guid("177932fd-662d-46a5-b16a-efd2f78e50f7")
                        },
                        new
                        {
                            Id = new Guid("aeb020c5-5ab0-4ff7-b13f-146f063390e7"),
                            Description = "Andy shoes are designed to keeping in mind durability as well as trends, the most stylish range of shoes & sandals",
                            ImageUrl = "https://picsum.photos/640/480/?image=698",
                            Name = "Intelligent Concrete Table",
                            Theme = "Refined",
                            UserId = new Guid("d87609de-2cd0-4526-b955-00a887793b43")
                        },
                        new
                        {
                            Id = new Guid("a71f7fcd-a441-4883-aea4-1bcb27d23123"),
                            Description = "The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J",
                            ImageUrl = "https://picsum.photos/640/480/?image=864",
                            Name = "Practical Soft Gloves",
                            Theme = "Generic",
                            UserId = new Guid("4a9b390e-19c8-41ce-9386-a15ea49c6841")
                        },
                        new
                        {
                            Id = new Guid("cc8e8318-d7d9-4ed1-8f85-02165d3cce3d"),
                            Description = "The Football Is Good For Training And Recreational Purposes",
                            ImageUrl = "https://picsum.photos/640/480/?image=293",
                            Name = "Ergonomic Plastic Chips",
                            Theme = "Handmade",
                            UserId = new Guid("4a9b390e-19c8-41ce-9386-a15ea49c6841")
                        });
                });

            modelBuilder.Entity("MyItems.Backend.Models.CustomProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeProperty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId");

                    b.ToTable("CustomProperties");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4f645b06-7233-46d4-aa21-93e5a0797edb"),
                            CollectionId = new Guid("9e2efdb6-93ed-4091-bacf-8d611df2b3b8"),
                            Name = "Hills, Predovic and Schinner",
                            TypeProperty = "string"
                        },
                        new
                        {
                            Id = new Guid("92a7f956-e9d2-4fad-8c86-06d163921e9b"),
                            CollectionId = new Guid("3f607394-c7c1-43b4-b6cf-44ac3a7ad002"),
                            Name = "Doyle - Kohler",
                            TypeProperty = "dateTime"
                        },
                        new
                        {
                            Id = new Guid("204120d3-7f3f-473f-b9d3-653de96692ff"),
                            CollectionId = new Guid("5cddd6a6-074d-4e80-b4df-3e31b8125ba5"),
                            Name = "Shanahan Group",
                            TypeProperty = "string"
                        },
                        new
                        {
                            Id = new Guid("bd44d173-026b-4d43-98d3-96ba64e53bbe"),
                            CollectionId = new Guid("8aa80f67-c88b-4ef9-8bf5-1303d54e8fd3"),
                            Name = "Hammes - Boyle",
                            TypeProperty = "string"
                        },
                        new
                        {
                            Id = new Guid("7f6967ba-d92a-458a-87d6-dead666529f9"),
                            CollectionId = new Guid("6badf3ba-7815-42c3-9b10-1a083d58ce3b"),
                            Name = "Ullrich - McLaughlin",
                            TypeProperty = "string"
                        },
                        new
                        {
                            Id = new Guid("f711de9b-b9ba-4b4a-b07b-397a5a0fae62"),
                            CollectionId = new Guid("7e22cceb-24f1-4d79-a009-ba2c5a1b4f57"),
                            Name = "Graham LLC",
                            TypeProperty = "string"
                        },
                        new
                        {
                            Id = new Guid("04f2755e-3944-4169-a79f-aff0d7f8aa10"),
                            CollectionId = new Guid("397616cd-3d19-4d76-8d57-a8cb666f13d8"),
                            Name = "Renner LLC",
                            TypeProperty = "number"
                        },
                        new
                        {
                            Id = new Guid("5551a26a-53ff-4a0c-a663-cdf121def52a"),
                            CollectionId = new Guid("aeb020c5-5ab0-4ff7-b13f-146f063390e7"),
                            Name = "Tromp - Osinski",
                            TypeProperty = "number"
                        },
                        new
                        {
                            Id = new Guid("00324a93-3876-4195-bc45-7344045c1b62"),
                            CollectionId = new Guid("a71f7fcd-a441-4883-aea4-1bcb27d23123"),
                            Name = "Prosacco, Cummings and Towne",
                            TypeProperty = "boolean"
                        },
                        new
                        {
                            Id = new Guid("defe8ff0-10b3-4d49-bcb3-beb748c6616b"),
                            CollectionId = new Guid("cc8e8318-d7d9-4ed1-8f85-02165d3cce3d"),
                            Name = "Hickle - Larkin",
                            TypeProperty = "boolean"
                        });
                });

            modelBuilder.Entity("MyItems.Backend.Models.CustomPropertyValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomPropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomPropertyId");

                    b.HasIndex("ItemId");

                    b.ToTable("CustomPropertyValues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d3783308-8e1e-4b79-b7c6-6e290afdc081"),
                            CustomPropertyId = new Guid("4f645b06-7233-46d4-aa21-93e5a0797edb"),
                            ItemId = new Guid("09352e71-1995-4610-bc7e-6cb035118db4"),
                            Value = "Incredible Wooden Cheese"
                        },
                        new
                        {
                            Id = new Guid("20cd9e01-582f-4e4c-bf4c-5487dc80cdcf"),
                            CustomPropertyId = new Guid("92a7f956-e9d2-4fad-8c86-06d163921e9b"),
                            ItemId = new Guid("efc7b34c-a6e3-4da4-9348-6a9f955c81ab"),
                            Value = "Sleek Concrete Fish"
                        },
                        new
                        {
                            Id = new Guid("66c54df3-2d7a-425f-8b23-71f1bc1edec4"),
                            CustomPropertyId = new Guid("204120d3-7f3f-473f-b9d3-653de96692ff"),
                            ItemId = new Guid("2a91aee2-7c96-4601-b49c-08249ae3c377"),
                            Value = "Sleek Rubber Fish"
                        },
                        new
                        {
                            Id = new Guid("297eb0b9-830e-4b58-a2e6-8da1fad628a2"),
                            CustomPropertyId = new Guid("bd44d173-026b-4d43-98d3-96ba64e53bbe"),
                            ItemId = new Guid("df1ddb8a-8d94-4086-b0fc-a0cfb177d003"),
                            Value = "Refined Rubber Computer"
                        },
                        new
                        {
                            Id = new Guid("946d2642-e47e-450a-96c2-8f03293662e5"),
                            CustomPropertyId = new Guid("7f6967ba-d92a-458a-87d6-dead666529f9"),
                            ItemId = new Guid("853921c3-73dd-481a-ade4-6d7b94810e1b"),
                            Value = "Intelligent Concrete Car"
                        },
                        new
                        {
                            Id = new Guid("365a99d9-a052-4f6c-9887-98d9f43022fa"),
                            CustomPropertyId = new Guid("f711de9b-b9ba-4b4a-b07b-397a5a0fae62"),
                            ItemId = new Guid("a556b743-27cb-4c99-94d5-37678c173053"),
                            Value = "Sleek Soft Chicken"
                        },
                        new
                        {
                            Id = new Guid("d50501bb-95a4-4309-9910-694bc06032fc"),
                            CustomPropertyId = new Guid("04f2755e-3944-4169-a79f-aff0d7f8aa10"),
                            ItemId = new Guid("577b82b8-4ff9-45b8-8785-8652b80f177a"),
                            Value = "Generic Rubber Pants"
                        },
                        new
                        {
                            Id = new Guid("a3cfce01-c76b-4889-8579-113ad78dea40"),
                            CustomPropertyId = new Guid("5551a26a-53ff-4a0c-a663-cdf121def52a"),
                            ItemId = new Guid("6bed9001-f3bf-495c-96d4-bfca6080c211"),
                            Value = "Intelligent Plastic Ball"
                        },
                        new
                        {
                            Id = new Guid("ee0dcc24-9350-4702-bf42-b1fb68a127dd"),
                            CustomPropertyId = new Guid("00324a93-3876-4195-bc45-7344045c1b62"),
                            ItemId = new Guid("49bb409e-1f20-4821-b58a-3e745a6d3cca"),
                            Value = "Small Fresh Mouse"
                        },
                        new
                        {
                            Id = new Guid("db79dadc-6526-4830-a5ba-4dfeefccf73a"),
                            CustomPropertyId = new Guid("defe8ff0-10b3-4d49-bcb3-beb748c6616b"),
                            ItemId = new Guid("87c5e7be-4c52-479f-9952-9247363baf10"),
                            Value = "Ergonomic Concrete Chair"
                        });
                });

            modelBuilder.Entity("MyItems.Backend.Models.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = new Guid("09352e71-1995-4610-bc7e-6cb035118db4"),
                            CollectionId = new Guid("9e2efdb6-93ed-4091-bacf-8d611df2b3b8"),
                            CreatedAt = new DateTime(2023, 4, 21, 13, 41, 31, 30, DateTimeKind.Local).AddTicks(2865),
                            Name = "Gorgeous Wooden Cheese"
                        },
                        new
                        {
                            Id = new Guid("efc7b34c-a6e3-4da4-9348-6a9f955c81ab"),
                            CollectionId = new Guid("3f607394-c7c1-43b4-b6cf-44ac3a7ad002"),
                            CreatedAt = new DateTime(2023, 5, 5, 3, 36, 13, 320, DateTimeKind.Local).AddTicks(8603),
                            Name = "Refined Metal Bacon"
                        },
                        new
                        {
                            Id = new Guid("2a91aee2-7c96-4601-b49c-08249ae3c377"),
                            CollectionId = new Guid("5cddd6a6-074d-4e80-b4df-3e31b8125ba5"),
                            CreatedAt = new DateTime(2023, 3, 15, 0, 16, 8, 482, DateTimeKind.Local).AddTicks(5881),
                            Name = "Unbranded Cotton Soap"
                        },
                        new
                        {
                            Id = new Guid("df1ddb8a-8d94-4086-b0fc-a0cfb177d003"),
                            CollectionId = new Guid("8aa80f67-c88b-4ef9-8bf5-1303d54e8fd3"),
                            CreatedAt = new DateTime(2022, 10, 1, 6, 35, 48, 745, DateTimeKind.Local).AddTicks(9625),
                            Name = "Handcrafted Frozen Shoes"
                        },
                        new
                        {
                            Id = new Guid("853921c3-73dd-481a-ade4-6d7b94810e1b"),
                            CollectionId = new Guid("6badf3ba-7815-42c3-9b10-1a083d58ce3b"),
                            CreatedAt = new DateTime(2022, 11, 24, 4, 20, 40, 857, DateTimeKind.Local).AddTicks(3895),
                            Name = "Incredible Soft Towels"
                        },
                        new
                        {
                            Id = new Guid("a556b743-27cb-4c99-94d5-37678c173053"),
                            CollectionId = new Guid("7e22cceb-24f1-4d79-a009-ba2c5a1b4f57"),
                            CreatedAt = new DateTime(2023, 6, 14, 5, 37, 18, 312, DateTimeKind.Local).AddTicks(2590),
                            Name = "Ergonomic Concrete Fish"
                        },
                        new
                        {
                            Id = new Guid("577b82b8-4ff9-45b8-8785-8652b80f177a"),
                            CollectionId = new Guid("397616cd-3d19-4d76-8d57-a8cb666f13d8"),
                            CreatedAt = new DateTime(2022, 10, 1, 11, 0, 35, 171, DateTimeKind.Local).AddTicks(9044),
                            Name = "Handcrafted Concrete Towels"
                        },
                        new
                        {
                            Id = new Guid("6bed9001-f3bf-495c-96d4-bfca6080c211"),
                            CollectionId = new Guid("aeb020c5-5ab0-4ff7-b13f-146f063390e7"),
                            CreatedAt = new DateTime(2023, 2, 25, 16, 34, 44, 21, DateTimeKind.Local).AddTicks(5237),
                            Name = "Fantastic Concrete Computer"
                        },
                        new
                        {
                            Id = new Guid("49bb409e-1f20-4821-b58a-3e745a6d3cca"),
                            CollectionId = new Guid("a71f7fcd-a441-4883-aea4-1bcb27d23123"),
                            CreatedAt = new DateTime(2023, 1, 12, 6, 46, 37, 724, DateTimeKind.Local).AddTicks(7020),
                            Name = "Refined Metal Gloves"
                        },
                        new
                        {
                            Id = new Guid("87c5e7be-4c52-479f-9952-9247363baf10"),
                            CollectionId = new Guid("cc8e8318-d7d9-4ed1-8f85-02165d3cce3d"),
                            CreatedAt = new DateTime(2023, 2, 6, 19, 31, 44, 933, DateTimeKind.Local).AddTicks(5850),
                            Name = "Gorgeous Soft Chicken"
                        });
                });

            modelBuilder.Entity("MyItems.Backend.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a7498063-4bee-4ee4-8e92-29914e5d2517"),
                            Email = "otabek.r743@gmail.com",
                            FirstName = "Admin",
                            IsAdmin = true,
                            IsBlocked = false,
                            LastName = "Admin",
                            PasswordHash = "AQAAAAIAAYagAAAAEJsQhxvRZnTRqO2Jk9q/36tRhT1LD9BIAUsMuO2YrxZ4UlTc6QRjTD5Cbb7uA/sSsw=="
                        },
                        new
                        {
                            Id = new Guid("84719cf0-77a3-4f46-ba09-a911baae15a7"),
                            Email = "Amy.Rice@hotmail.com",
                            FirstName = "Amy",
                            IsAdmin = false,
                            IsBlocked = false,
                            LastName = "Rice",
                            PasswordHash = ""
                        },
                        new
                        {
                            Id = new Guid("1fbbf25e-9b3b-4f89-b775-ba5afa9d70da"),
                            Email = "Darryl_Moore@gmail.com",
                            FirstName = "Darryl",
                            IsAdmin = false,
                            IsBlocked = false,
                            LastName = "Moore",
                            PasswordHash = ""
                        },
                        new
                        {
                            Id = new Guid("801f9690-4335-4377-9aec-ac971a0a2112"),
                            Email = "Rex.Leannon74@yahoo.com",
                            FirstName = "Rex",
                            IsAdmin = false,
                            IsBlocked = false,
                            LastName = "Leannon",
                            PasswordHash = ""
                        },
                        new
                        {
                            Id = new Guid("e52c7178-9d41-41e9-b6c7-e5fca18a57ce"),
                            Email = "Stacy_Weissnat@gmail.com",
                            FirstName = "Stacy",
                            IsAdmin = false,
                            IsBlocked = false,
                            LastName = "Weissnat",
                            PasswordHash = ""
                        },
                        new
                        {
                            Id = new Guid("177932fd-662d-46a5-b16a-efd2f78e50f7"),
                            Email = "Garrett.Kub@yahoo.com",
                            FirstName = "Garrett",
                            IsAdmin = false,
                            IsBlocked = false,
                            LastName = "Kub",
                            PasswordHash = ""
                        },
                        new
                        {
                            Id = new Guid("1069aa25-88f5-4ce9-a51e-572ff2b7b8ad"),
                            Email = "Jay.Stokes0@hotmail.com",
                            FirstName = "Jay",
                            IsAdmin = false,
                            IsBlocked = false,
                            LastName = "Stokes",
                            PasswordHash = ""
                        },
                        new
                        {
                            Id = new Guid("b70bba9e-7d66-4317-9e8f-330d86e57d76"),
                            Email = "Kate.Rippin@yahoo.com",
                            FirstName = "Kate",
                            IsAdmin = false,
                            IsBlocked = false,
                            LastName = "Rippin",
                            PasswordHash = ""
                        },
                        new
                        {
                            Id = new Guid("d87609de-2cd0-4526-b955-00a887793b43"),
                            Email = "Jerome_Berge@gmail.com",
                            FirstName = "Jerome",
                            IsAdmin = false,
                            IsBlocked = false,
                            LastName = "Berge",
                            PasswordHash = ""
                        },
                        new
                        {
                            Id = new Guid("4a9b390e-19c8-41ce-9386-a15ea49c6841"),
                            Email = "Brandon.Krajcik@hotmail.com",
                            FirstName = "Brandon",
                            IsAdmin = false,
                            IsBlocked = false,
                            LastName = "Krajcik",
                            PasswordHash = ""
                        },
                        new
                        {
                            Id = new Guid("1e538167-c699-4a8c-a984-77167152410c"),
                            Email = "Marjorie_Witting@yahoo.com",
                            FirstName = "Marjorie",
                            IsAdmin = false,
                            IsBlocked = false,
                            LastName = "Witting",
                            PasswordHash = ""
                        });
                });

            modelBuilder.Entity("MyItems.Backend.Models.Collection", b =>
                {
                    b.HasOne("MyItems.Backend.Models.User", "User")
                        .WithMany("Collections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyItems.Backend.Models.CustomProperty", b =>
                {
                    b.HasOne("MyItems.Backend.Models.Collection", "Collection")
                        .WithMany("CustomProperties")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("MyItems.Backend.Models.CustomPropertyValue", b =>
                {
                    b.HasOne("MyItems.Backend.Models.CustomProperty", "CustomProperty")
                        .WithMany("CustomPropertyValues")
                        .HasForeignKey("CustomPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyItems.Backend.Models.Item", "Item")
                        .WithMany("CustomPropertyValues")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CustomProperty");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("MyItems.Backend.Models.Item", b =>
                {
                    b.HasOne("MyItems.Backend.Models.Collection", "Collection")
                        .WithMany("Items")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("MyItems.Backend.Models.Collection", b =>
                {
                    b.Navigation("CustomProperties");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("MyItems.Backend.Models.CustomProperty", b =>
                {
                    b.Navigation("CustomPropertyValues");
                });

            modelBuilder.Entity("MyItems.Backend.Models.Item", b =>
                {
                    b.Navigation("CustomPropertyValues");
                });

            modelBuilder.Entity("MyItems.Backend.Models.User", b =>
                {
                    b.Navigation("Collections");
                });
#pragma warning restore 612, 618
        }
    }
}
