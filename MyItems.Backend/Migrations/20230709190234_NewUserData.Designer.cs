// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyItems.Backend;

#nullable disable

namespace MyItems.Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230709190234_NewUserData")]
    partial class NewUserData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MyItems.Backend.Models.Collection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Collections");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8093cefc-1f93-4f1c-b2a1-82ea038f3b57"),
                            Description = "Boston's most advanced compression wear technology increases muscle oxygenation, stabilizes active muscles",
                            ImageUrl = "https://picsum.photos/640/480/?image=342",
                            Name = "Fantastic Frozen Cheese",
                            Theme = "Gorgeous",
                            UserId = new Guid("5b539dcc-b47c-43eb-9947-3d3493c386ad")
                        },
                        new
                        {
                            Id = new Guid("97896179-1eee-467a-870e-c1fe9922092b"),
                            Description = "New ABC 13 9370, 13.3, 5th Gen CoreA5-8250U, 8GB RAM, 256GB SSD, power UHD Graphics, OS 10 Home, OS Office A & J 2016",
                            ImageUrl = "https://picsum.photos/640/480/?image=958",
                            Name = "Rustic Soft Towels",
                            Theme = "Handmade",
                            UserId = new Guid("013c4915-ffe7-43cc-8100-c34a490566e3")
                        },
                        new
                        {
                            Id = new Guid("9f3b4a38-90ee-47de-8b17-1f47627f0376"),
                            Description = "Carbonite web goalkeeper gloves are ergonomically designed to give easy fit",
                            ImageUrl = "https://picsum.photos/640/480/?image=3",
                            Name = "Intelligent Fresh Sausages",
                            Theme = "Licensed",
                            UserId = new Guid("c320f0e3-5d58-47e1-bae3-2b872ec12035")
                        },
                        new
                        {
                            Id = new Guid("f234067e-1ec5-491a-bf6d-32f1c39ffca7"),
                            Description = "The Football Is Good For Training And Recreational Purposes",
                            ImageUrl = "https://picsum.photos/640/480/?image=829",
                            Name = "Licensed Wooden Cheese",
                            Theme = "Ergonomic",
                            UserId = new Guid("009f517c-a274-4046-afe4-e1ec0e278cf0")
                        },
                        new
                        {
                            Id = new Guid("d682552f-2881-43b2-8b69-7231c80cfb65"),
                            Description = "The Football Is Good For Training And Recreational Purposes",
                            ImageUrl = "https://picsum.photos/640/480/?image=225",
                            Name = "Practical Cotton Cheese",
                            Theme = "Small",
                            UserId = new Guid("013c4915-ffe7-43cc-8100-c34a490566e3")
                        },
                        new
                        {
                            Id = new Guid("e3d17e8e-b7ff-4dfc-9926-7ad8db9b6306"),
                            Description = "Andy shoes are designed to keeping in mind durability as well as trends, the most stylish range of shoes & sandals",
                            ImageUrl = "https://picsum.photos/640/480/?image=628",
                            Name = "Small Steel Chicken",
                            Theme = "Rustic",
                            UserId = new Guid("29a30a04-12a8-49de-bf04-5698db18eeb9")
                        },
                        new
                        {
                            Id = new Guid("285625a2-a0ea-4cb6-a4b3-6537ac44aedd"),
                            Description = "Ergonomic executive chair upholstered in bonded black leather and PVC padded seat and back for all-day comfort and support",
                            ImageUrl = "https://picsum.photos/640/480/?image=607",
                            Name = "Sleek Plastic Gloves",
                            Theme = "Refined",
                            UserId = new Guid("009f517c-a274-4046-afe4-e1ec0e278cf0")
                        },
                        new
                        {
                            Id = new Guid("569292fa-23ba-42bf-b2f8-f14414f84313"),
                            Description = "New ABC 13 9370, 13.3, 5th Gen CoreA5-8250U, 8GB RAM, 256GB SSD, power UHD Graphics, OS 10 Home, OS Office A & J 2016",
                            ImageUrl = "https://picsum.photos/640/480/?image=437",
                            Name = "Awesome Frozen Tuna",
                            Theme = "Handcrafted",
                            UserId = new Guid("c320f0e3-5d58-47e1-bae3-2b872ec12035")
                        },
                        new
                        {
                            Id = new Guid("70a5b1f9-58fa-4f4a-af34-8125d4349062"),
                            Description = "The slim & simple Maple Gaming Keyboard from Dev Byte comes with a sleek body and 7- Color RGB LED Back-lighting for smart functionality",
                            ImageUrl = "https://picsum.photos/640/480/?image=670",
                            Name = "Licensed Fresh Sausages",
                            Theme = "Handmade",
                            UserId = new Guid("5a211183-7a42-4696-9935-d7f14976a496")
                        },
                        new
                        {
                            Id = new Guid("b374fe94-1676-48d6-9e9f-7f77a0d853bf"),
                            Description = "Andy shoes are designed to keeping in mind durability as well as trends, the most stylish range of shoes & sandals",
                            ImageUrl = "https://picsum.photos/640/480/?image=226",
                            Name = "Sleek Wooden Shirt",
                            Theme = "Licensed",
                            UserId = new Guid("6ea3daa1-e45c-44a6-8fa2-5553b4d256e4")
                        });
                });

            modelBuilder.Entity("MyItems.Backend.Models.CustomProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TypeProperty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId");

                    b.ToTable("CustomProperty");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0318c508-fc0f-4f22-a236-2180353ffd4c"),
                            CollectionId = new Guid("8093cefc-1f93-4f1c-b2a1-82ea038f3b57"),
                            TypeProperty = "boolean"
                        },
                        new
                        {
                            Id = new Guid("ff6779e8-cbd3-41a7-bd6a-0b8f3394e44f"),
                            CollectionId = new Guid("97896179-1eee-467a-870e-c1fe9922092b"),
                            TypeProperty = "number"
                        },
                        new
                        {
                            Id = new Guid("1d4fd7e5-1530-40eb-9374-f877b1f6d49d"),
                            CollectionId = new Guid("9f3b4a38-90ee-47de-8b17-1f47627f0376"),
                            TypeProperty = "dateTime"
                        },
                        new
                        {
                            Id = new Guid("ac79ec1a-315c-462e-8600-85a230f7ae86"),
                            CollectionId = new Guid("f234067e-1ec5-491a-bf6d-32f1c39ffca7"),
                            TypeProperty = "boolean"
                        },
                        new
                        {
                            Id = new Guid("990c65bf-1cfe-47fe-a645-ac37573ea24f"),
                            CollectionId = new Guid("d682552f-2881-43b2-8b69-7231c80cfb65"),
                            TypeProperty = "number"
                        },
                        new
                        {
                            Id = new Guid("14eddbec-2c4c-4c99-a452-b27a7688bfe5"),
                            CollectionId = new Guid("e3d17e8e-b7ff-4dfc-9926-7ad8db9b6306"),
                            TypeProperty = "number"
                        },
                        new
                        {
                            Id = new Guid("9a39faa8-8c98-4d22-a962-44510d9da441"),
                            CollectionId = new Guid("285625a2-a0ea-4cb6-a4b3-6537ac44aedd"),
                            TypeProperty = "boolean"
                        },
                        new
                        {
                            Id = new Guid("fcdefcae-d34a-4ce8-84c2-bcb91a24019b"),
                            CollectionId = new Guid("569292fa-23ba-42bf-b2f8-f14414f84313"),
                            TypeProperty = "boolean"
                        },
                        new
                        {
                            Id = new Guid("1d8caf32-055f-49fe-a933-5bb52902d399"),
                            CollectionId = new Guid("70a5b1f9-58fa-4f4a-af34-8125d4349062"),
                            TypeProperty = "number"
                        },
                        new
                        {
                            Id = new Guid("dff3b429-7e16-46c1-8fc9-0ce4d628dce7"),
                            CollectionId = new Guid("b374fe94-1676-48d6-9e9f-7f77a0d853bf"),
                            TypeProperty = "dateTime"
                        });
                });

            modelBuilder.Entity("MyItems.Backend.Models.CustomPropertyValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomPropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomPropertyId");

                    b.HasIndex("ItemId");

                    b.ToTable("CustomPropertyValue");
                });

            modelBuilder.Entity("MyItems.Backend.Models.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0a30e119-a43b-433b-aefa-2d231bcb8594"),
                            CollectionId = new Guid("8093cefc-1f93-4f1c-b2a1-82ea038f3b57"),
                            CreatedAt = new DateTime(2022, 7, 27, 10, 34, 42, 874, DateTimeKind.Local).AddTicks(8769),
                            Name = "Awesome Steel Tuna"
                        },
                        new
                        {
                            Id = new Guid("f7026fb6-1f84-451e-8cb6-3698a17060f9"),
                            CollectionId = new Guid("97896179-1eee-467a-870e-c1fe9922092b"),
                            CreatedAt = new DateTime(2022, 8, 5, 8, 57, 10, 216, DateTimeKind.Local).AddTicks(9512),
                            Name = "Licensed Concrete Soap"
                        },
                        new
                        {
                            Id = new Guid("8ad0df35-099e-4e98-8427-accce1a44cbf"),
                            CollectionId = new Guid("9f3b4a38-90ee-47de-8b17-1f47627f0376"),
                            CreatedAt = new DateTime(2022, 9, 5, 13, 12, 2, 575, DateTimeKind.Local).AddTicks(6102),
                            Name = "Tasty Granite Table"
                        },
                        new
                        {
                            Id = new Guid("8d284fb8-346b-4b7a-bfe8-b3f6347e1399"),
                            CollectionId = new Guid("f234067e-1ec5-491a-bf6d-32f1c39ffca7"),
                            CreatedAt = new DateTime(2023, 6, 16, 2, 22, 24, 306, DateTimeKind.Local).AddTicks(2577),
                            Name = "Fantastic Metal Ball"
                        },
                        new
                        {
                            Id = new Guid("8bad0c06-262f-4b9b-90fe-5800b5a96191"),
                            CollectionId = new Guid("d682552f-2881-43b2-8b69-7231c80cfb65"),
                            CreatedAt = new DateTime(2023, 6, 10, 2, 37, 9, 978, DateTimeKind.Local).AddTicks(6),
                            Name = "Tasty Steel Bike"
                        },
                        new
                        {
                            Id = new Guid("fb6bfd95-a97e-477b-819f-2f1f263a104f"),
                            CollectionId = new Guid("e3d17e8e-b7ff-4dfc-9926-7ad8db9b6306"),
                            CreatedAt = new DateTime(2022, 10, 30, 20, 52, 44, 546, DateTimeKind.Local).AddTicks(6036),
                            Name = "Rustic Soft Chips"
                        },
                        new
                        {
                            Id = new Guid("6ad58535-ceac-4cb2-8f84-53687fd8e13a"),
                            CollectionId = new Guid("285625a2-a0ea-4cb6-a4b3-6537ac44aedd"),
                            CreatedAt = new DateTime(2022, 12, 21, 7, 18, 29, 69, DateTimeKind.Local).AddTicks(2392),
                            Name = "Awesome Rubber Towels"
                        },
                        new
                        {
                            Id = new Guid("36251514-e1b4-4e8e-8828-715cf9d8714e"),
                            CollectionId = new Guid("569292fa-23ba-42bf-b2f8-f14414f84313"),
                            CreatedAt = new DateTime(2022, 7, 20, 6, 56, 34, 185, DateTimeKind.Local).AddTicks(1575),
                            Name = "Practical Soft Car"
                        },
                        new
                        {
                            Id = new Guid("3b83f47a-4a93-4594-9682-5326334969b3"),
                            CollectionId = new Guid("70a5b1f9-58fa-4f4a-af34-8125d4349062"),
                            CreatedAt = new DateTime(2022, 8, 6, 8, 33, 11, 245, DateTimeKind.Local).AddTicks(5709),
                            Name = "Tasty Concrete Pants"
                        },
                        new
                        {
                            Id = new Guid("2c34ead9-0aaa-4e19-8e98-c5d56dec3b14"),
                            CollectionId = new Guid("b374fe94-1676-48d6-9e9f-7f77a0d853bf"),
                            CreatedAt = new DateTime(2023, 7, 3, 10, 51, 8, 718, DateTimeKind.Local).AddTicks(274),
                            Name = "Licensed Steel Pizza"
                        });
                });

            modelBuilder.Entity("MyItems.Backend.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00ce7784-cde6-453e-b823-d91245e73bf1"),
                            Email = "otabek.pro@hotmail.com",
                            FirstName = "Admin",
                            IsAdmin = true,
                            IsBlocked = false,
                            LastName = "Admin",
                            PasswordHash = "AQAAAAIAAYagAAAAEJsQhxvRZnTRqO2Jk9q/36tRhT1LD9BIAUsMuO2YrxZ4UlTc6QRjTD5Cbb7uA/sSsw=="
                        },
                        new
                        {
                            Id = new Guid("5b539dcc-b47c-43eb-9947-3d3493c386ad"),
                            Email = "Emilio92@yahoo.com",
                            FirstName = "Emilio",
                            IsAdmin = false,
                            IsBlocked = false,
                            LastName = "Swaniawski",
                            PasswordHash = ""
                        },
                        new
                        {
                            Id = new Guid("29a30a04-12a8-49de-bf04-5698db18eeb9"),
                            Email = "Marsha10@gmail.com",
                            FirstName = "Marsha",
                            IsAdmin = false,
                            IsBlocked = false,
                            LastName = "Harris",
                            PasswordHash = ""
                        },
                        new
                        {
                            Id = new Guid("2370ec1f-059b-424c-aa72-36e5aae04eb4"),
                            Email = "Jay_Howe76@yahoo.com",
                            FirstName = "Jay",
                            IsAdmin = false,
                            IsBlocked = false,
                            LastName = "Howe",
                            PasswordHash = ""
                        },
                        new
                        {
                            Id = new Guid("b7c48246-08c1-4338-b2f9-5dd61b019f32"),
                            Email = "Gordon3@hotmail.com",
                            FirstName = "Gordon",
                            IsAdmin = false,
                            IsBlocked = false,
                            LastName = "Ullrich",
                            PasswordHash = ""
                        },
                        new
                        {
                            Id = new Guid("5a211183-7a42-4696-9935-d7f14976a496"),
                            Email = "Alfonso.Kulas63@yahoo.com",
                            FirstName = "Alfonso",
                            IsAdmin = false,
                            IsBlocked = false,
                            LastName = "Kulas",
                            PasswordHash = ""
                        },
                        new
                        {
                            Id = new Guid("6ea3daa1-e45c-44a6-8fa2-5553b4d256e4"),
                            Email = "Darin.Mueller65@hotmail.com",
                            FirstName = "Darin",
                            IsAdmin = false,
                            IsBlocked = false,
                            LastName = "Mueller",
                            PasswordHash = ""
                        },
                        new
                        {
                            Id = new Guid("009f517c-a274-4046-afe4-e1ec0e278cf0"),
                            Email = "Leon82@hotmail.com",
                            FirstName = "Leon",
                            IsAdmin = false,
                            IsBlocked = false,
                            LastName = "Orn",
                            PasswordHash = ""
                        },
                        new
                        {
                            Id = new Guid("013c4915-ffe7-43cc-8100-c34a490566e3"),
                            Email = "Rosemary74@gmail.com",
                            FirstName = "Rosemary",
                            IsAdmin = false,
                            IsBlocked = false,
                            LastName = "Rau",
                            PasswordHash = ""
                        },
                        new
                        {
                            Id = new Guid("152f066d-d6ea-4d5e-9e19-a4469b4a1fc9"),
                            Email = "Jorge25@hotmail.com",
                            FirstName = "Jorge",
                            IsAdmin = false,
                            IsBlocked = false,
                            LastName = "Cummerata",
                            PasswordHash = ""
                        },
                        new
                        {
                            Id = new Guid("c320f0e3-5d58-47e1-bae3-2b872ec12035"),
                            Email = "Aaron97@yahoo.com",
                            FirstName = "Aaron",
                            IsAdmin = false,
                            IsBlocked = false,
                            LastName = "DuBuque",
                            PasswordHash = ""
                        });
                });

            modelBuilder.Entity("MyItems.Backend.Models.Collection", b =>
                {
                    b.HasOne("MyItems.Backend.Models.User", "User")
                        .WithMany("Collections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyItems.Backend.Models.CustomProperty", b =>
                {
                    b.HasOne("MyItems.Backend.Models.Collection", "Collection")
                        .WithMany("CustomProperties")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("MyItems.Backend.Models.CustomPropertyValue", b =>
                {
                    b.HasOne("MyItems.Backend.Models.CustomProperty", "CustomProperty")
                        .WithMany("CustomPropertyValues")
                        .HasForeignKey("CustomPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyItems.Backend.Models.Item", "Item")
                        .WithMany("CustomPropertyValues")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CustomProperty");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("MyItems.Backend.Models.Item", b =>
                {
                    b.HasOne("MyItems.Backend.Models.Collection", "Collection")
                        .WithMany("Items")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("MyItems.Backend.Models.Collection", b =>
                {
                    b.Navigation("CustomProperties");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("MyItems.Backend.Models.CustomProperty", b =>
                {
                    b.Navigation("CustomPropertyValues");
                });

            modelBuilder.Entity("MyItems.Backend.Models.Item", b =>
                {
                    b.Navigation("CustomPropertyValues");
                });

            modelBuilder.Entity("MyItems.Backend.Models.User", b =>
                {
                    b.Navigation("Collections");
                });
#pragma warning restore 612, 618
        }
    }
}
